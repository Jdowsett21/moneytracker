{"version":3,"sources":["actions/AccountActions.js","pages/AddAccount.js"],"names":["setLoading","type","SET_ACCOUNT_LOADING","getAccounts","dispatch","a","authAxios","get","data","GET_ACCOUNTS","payload","ACCOUNT_ERROR","addAccount","account","post","ADD_ACCOUNT","filterAccountTypes","FILTER_ACCOUNT_TYPES","setCash","SET_CASH","setDebt","SET_DEBT","setTotal","SET_TOTAL","setCashPercent","SET_CASH_PERCENTAGE_BAR","setDebtPercent","SET_DEBT_PERCENTAGE_BAR","setTotalPercent","SET_NET_PERCENTAGE_BAR","AccountSchema","Yup","shape","accountName","required","connect","state","auth","isUserAuthenticated","setAuthInfo","isAdmin","isAuthenticated","loading","useEffect","Fragment","to","initialValues","onSubmit","values","validationSchema","text","ariaLabel","name","placeholder"],"mappings":"idAeMA,EAAa,WACjB,MAAO,CACLC,KAAMC,MAGGC,EAAc,yDAAM,WAAOC,GAAP,iBAAAC,EAAA,sEAE7BL,IAF6B,SAGNM,IAAUC,IAAI,yBAHR,gBAGrBC,EAHqB,EAGrBA,KACRJ,EAAS,CAAEH,KAAMQ,IAAcC,QAASF,IAJX,gDAM7BR,IACAI,EAAS,CACPH,KAAMU,MARqB,yDAAN,uDAcdC,EAAa,SAACC,GAAD,8CAAa,WAAOT,GAAP,iBAAAC,EAAA,sEAEnCL,IAFmC,SAGZM,IAAUQ,KAAK,0BAA2BD,GAH9B,gBAG3BL,EAH2B,EAG3BA,KACRJ,EAAS,CACPH,KAAMc,IACNL,QAASF,IANwB,gDASnCJ,EAAS,CACPH,KAAMU,MAV2B,yDAAb,uDAgBbK,EAAqB,WAChC,MAAO,CAAEf,KAAMgB,MAGJC,EAAU,WACrB,MAAO,CAAEjB,KAAMkB,MAEJC,EAAU,WACrB,MAAO,CAAEnB,KAAMoB,MAEJC,EAAW,WACtB,MAAO,CAAErB,KAAMsB,OAGJC,EAAiB,WAC5B,MAAO,CAAEvB,KAAMwB,MAEJC,EAAiB,WAC5B,MAAO,CAAEzB,KAAM0B,MAEJC,EAAkB,WAC7B,MAAO,CAAE3B,KAAM4B,Q,iCCvEjB,mHAqBMC,EAAgBC,MAAaC,MAAM,CACvCC,YAAaF,MAAaG,SAAS,8BA4DtBC,uBAHS,SAACC,GAAD,MAAY,CAClCC,KAAMD,EAAMC,QAE0B,CACtCzB,eACA0B,wBACAC,gBACAC,aAJaL,EAzDf,YAMI,IAAD,IALDE,KAAQI,EAKP,EALOA,gBAAiBC,EAKxB,EALwBA,QACzBJ,EAIC,EAJDA,oBACAC,EAGC,EAHDA,YACA3B,EAEC,EAFDA,WACA4B,EACC,EADDA,QAUA,OARAG,qBAAU,WAER,OADAL,IACO,WACLC,IACAC,OAGD,CAAC5B,IAEF,kBAAC,IAAMgC,SAAP,MACIH,GAAmB,kBAAC,IAAD,CAAUI,GAAG,MAClC,kBAAC,IAAD,MACA,kBAAC,IAAD,MAEA,kBAAC,IAAD,CACEC,cAAe,CACbb,YAAa,IAEfc,SAAU,SAACC,GAAD,OAAYpC,EAAWoC,IACjCC,iBAAkBnB,IAEjB,kBACC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoB,KAAK,iBACZ,kBAAC,IAAD,CACEC,UAAU,eACVC,KAAK,cACLnD,KAAK,OACLoD,YAAY,iBAEd,kBAAC,IAAD,CACEpD,KAAK,SACLiD,KAAK,cACLR,QAASA","file":"static/js/7.dbe71362.chunk.js","sourcesContent":["import {\r\n  FILTER_ACCOUNT_TYPES,\r\n  SET_CASH,\r\n  ADD_ACCOUNT,\r\n  ACCOUNT_ERROR,\r\n  SET_DEBT,\r\n  SET_ACCOUNT_LOADING,\r\n  SET_TOTAL,\r\n  SET_CASH_PERCENTAGE_BAR,\r\n  SET_DEBT_PERCENTAGE_BAR,\r\n  SET_NET_PERCENTAGE_BAR,\r\n  GET_ACCOUNTS,\r\n} from '../actions/types';\r\nimport { authAxios } from '../utils/authFetch';\r\n\r\nconst setLoading = () => {\r\n  return {\r\n    type: SET_ACCOUNT_LOADING,\r\n  };\r\n};\r\nexport const getAccounts = () => async (dispatch) => {\r\n  try {\r\n    setLoading();\r\n    const { data } = await authAxios.get('/accounts/getAccounts');\r\n    dispatch({ type: GET_ACCOUNTS, payload: data });\r\n  } catch (error) {\r\n    setLoading();\r\n    dispatch({\r\n      type: ACCOUNT_ERROR,\r\n      // payload: data.error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const addAccount = (account) => async (dispatch) => {\r\n  try {\r\n    setLoading();\r\n    const { data } = await authAxios.post('/accounts/createAccount', account);\r\n    dispatch({\r\n      type: ADD_ACCOUNT,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ACCOUNT_ERROR,\r\n      // payload: data.error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const filterAccountTypes = () => {\r\n  return { type: FILTER_ACCOUNT_TYPES };\r\n};\r\n\r\nexport const setCash = () => {\r\n  return { type: SET_CASH };\r\n};\r\nexport const setDebt = () => {\r\n  return { type: SET_DEBT };\r\n};\r\nexport const setTotal = () => {\r\n  return { type: SET_TOTAL };\r\n};\r\n\r\nexport const setCashPercent = () => {\r\n  return { type: SET_CASH_PERCENTAGE_BAR };\r\n};\r\nexport const setDebtPercent = () => {\r\n  return { type: SET_DEBT_PERCENTAGE_BAR };\r\n};\r\nexport const setTotalPercent = () => {\r\n  return { type: SET_NET_PERCENTAGE_BAR };\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Form, Formik } from 'formik';\r\nimport { connect } from 'react-redux';\r\nimport { addAccount } from '../actions/AccountActions';\r\nimport Label from './../components/common/Label';\r\n\r\nimport {\r\n  isUserAuthenticated,\r\n  setAuthInfo,\r\n  isAdmin,\r\n} from '../actions/authActions';\r\n\r\nimport { Redirect } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport GradientButton from '../components/common/GradientButton';\r\nimport FormInput from '../components/common/FormInput';\r\nimport NavbarTop from './../components/common/NavbarTop';\r\nimport NavBarSecondary from './../components/common/NavBarSecondary';\r\n\r\nconst AccountSchema = Yup.object().shape({\r\n  accountName: Yup.string().required('Account Name is required'),\r\n});\r\n\r\nfunction AddAccount({\r\n  auth: { isAuthenticated, loading },\r\n  isUserAuthenticated,\r\n  setAuthInfo,\r\n  addAccount,\r\n  isAdmin,\r\n}) {\r\n  useEffect(() => {\r\n    isUserAuthenticated();\r\n    return () => {\r\n      setAuthInfo();\r\n      isAdmin();\r\n    };\r\n    //eslint-disable-next-line\r\n  }, [addAccount]);\r\n  return (\r\n    <React.Fragment>\r\n      {!isAuthenticated && <Redirect to='/' />}\r\n      <NavbarTop />\r\n      <NavBarSecondary />\r\n\r\n      <Formik\r\n        initialValues={{\r\n          accountName: '',\r\n        }}\r\n        onSubmit={(values) => addAccount(values)}\r\n        validationSchema={AccountSchema}\r\n      >\r\n        {() => (\r\n          <Form>\r\n            <Label text='Account Name' />\r\n            <FormInput\r\n              ariaLabel='Account Name'\r\n              name='accountName'\r\n              type='text'\r\n              placeholder='Account Name'\r\n            />\r\n            <GradientButton\r\n              type='submit'\r\n              text='Add Account'\r\n              loading={loading}\r\n            />\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </React.Fragment>\r\n  );\r\n}\r\nAddAccount.propTypes = {\r\n  auth: PropTypes.object.isRequired,\r\n  setAuthInfo: PropTypes.func.isRequired,\r\n  addAccount: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\nexport default connect(mapStateToProps, {\r\n  addAccount,\r\n  isUserAuthenticated,\r\n  setAuthInfo,\r\n  isAdmin,\r\n})(AddAccount);\r\n"],"sourceRoot":""}